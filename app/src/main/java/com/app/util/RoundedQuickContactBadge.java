package com.app.util;import android.content.Context;import android.graphics.Canvas;import android.graphics.Path;import android.util.AttributeSet;import android.widget.QuickContactBadge;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Bitmap.Config;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.PorterDuff.Mode;import android.graphics.PorterDuffXfermode;import android.graphics.Rect;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.Drawable;import android.util.AttributeSet;import android.widget.ImageView;public class RoundedQuickContactBadge extends ImageView {    private static Bitmap output,finalBitmap;    private Bitmap b, roundBitmap,bitmap;    static Bitmap sbmp;    public RoundedQuickContactBadge(Context ctx, AttributeSet attrs) {        super(ctx, attrs);    }    @Override    protected void onDraw(Canvas canvas) {        /*Drawable drawable = getDrawable();        if (drawable == null) {            return;        }        if (getWidth() == 0 || getHeight() == 0) {            return;        }        b = ((BitmapDrawable) drawable).getBitmap();        bitmap = b.copy(Bitmap.Config.ARGB_8888, true);        int w = getWidth(), h = getHeight();        roundBitmap = getRoundedCroppedBitmap(bitmap, h<w?h:w);        canvas.drawBitmap(roundBitmap, 0, 0, null);*/        Drawable drawable = getDrawable();        if (drawable == null) {            return;        }        if (getWidth() == 0 || getHeight() == 0) {            return;        }       // Bitmap b = ((BitmapDrawable) drawable).getBitmap();        Bitmap bitmap = ((BitmapDrawable) drawable).getBitmap().copy(Bitmap.Config.ARGB_8888, true);        int w = getWidth();        @SuppressWarnings("unused")        int h = getHeight();        Bitmap roundBitmap = getRoundedCroppedBitmap(bitmap, h<w?h:w);        canvas.drawBitmap(roundBitmap, 0, 0, null);        bitmap.recycle();        roundBitmap.recycle();        sbmp.recycle();    }    public static Bitmap getRoundedCroppedBitmap(Bitmap bmp, int radius) {        /*if (bitmap1.getWidth() != radius || bitmap1.getHeight() != radius)            finalBitmap = Bitmap.createScaledBitmap(bitmap1, radius, radius,                    false);        else            finalBitmap = bitmap1;        output = Bitmap.createBitmap(finalBitmap.getWidth(),                finalBitmap.getHeight(), Config.ARGB_8888);        Canvas canvas = new Canvas(output);        final Paint paint = new Paint();        final Rect rect = new Rect(0, 0, finalBitmap.getWidth(),                finalBitmap.getHeight());        paint.setAntiAlias(true);        paint.setFilterBitmap(true);        paint.setDither(true);        canvas.drawARGB(0, 0, 0, 0);        paint.setColor(Color.parseColor("#BAB399"));        canvas.drawCircle(finalBitmap.getWidth() / 2 + 0.7f,                finalBitmap.getHeight() / 2 + 0.7f,                finalBitmap.getWidth() / 2 + 0.1f, paint);        paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));        canvas.drawBitmap(finalBitmap, rect, rect, paint);        return output;*/        if (bmp.getWidth() != radius || bmp.getHeight() != radius) {            float smallest = Math.min(bmp.getWidth(), bmp.getHeight());            float factor = smallest / radius;            sbmp = Bitmap.createScaledBitmap(bmp,                    (int) (bmp.getWidth() / factor),                    (int) (bmp.getHeight() / factor), false);        } else {            sbmp = bmp;        }        bmp.recycle();        Bitmap output = Bitmap.createBitmap(radius, radius, Config.ARGB_8888);        Canvas canvas = new Canvas(output);        final String color = "#BAB399";        final Paint paint = new Paint();        final Rect rect = new Rect(0, 0, radius, radius);        paint.setAntiAlias(true);        paint.setFilterBitmap(true);        paint.setDither(true);        canvas.drawARGB(0, 0, 0, 0);        paint.setColor(Color.parseColor(color));        canvas.drawCircle(radius / 2 + 0.7f, radius / 2 + 0.7f,                radius / 2 + 0.1f, paint);        paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));        canvas.drawBitmap(sbmp, rect, rect, paint);        return output;    }}